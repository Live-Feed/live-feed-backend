# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: LiveFeedBatch Module CI

on:
  push:
    branches:
      - 'LF-*'
  pull_request:
    types: [opened, closed, reopened]
    branches:
      - 'LF-*'
    paths:
      - "LiveFeedBatch/**"

jobs:
  test:
    if: github.event.pull_request.opened == true
    runs-on: ubuntu-latest
    environment: batch

    steps:
      - name: Checkout branch
        uses: actions/checkout@v3.5.2

      - name: Set up JDK 17
        uses: actions/setup-java@v3.11.0
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Gradle Test
        run: ./gradlew :LiveFeedBatch:test

  build:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    environment: crawler

    env:
      REGISTRY: ${{ secrets.REGISTRY }}
      IMAGE_NAME: ${{ secrets.IMAGE_NAME }}
      USERNAME: ${{ secrets.USERNAME }}

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout branch
        uses: actions/checkout@v3.5.2

      - name: Set up JDK 17
        uses: actions/setup-java@v3.11.0
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Extract version variable
        run: |
          echo "APP_VERSION=$(./gradlew :LiveFeedBatch:properties -q | grep version | awk -F ' ' '{ print $2 }')" >> $GITHUB_ENV

      - name: Execute Gradle build
        run: ./gradlew :LiveFeedBatch:clean :LiveFeedBatch:bootJar

      - name: Docker image build
        run: |
          cd ./LiveFeedBatch
          docker build \
          -t $REGISTRY/$IMAGE_NAME:$APP_VERSION .

      - name: Login to Container registry
        uses: docker/login-action@v2.1.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.USERNAME }}
          password: ${{ secrets.PERSONAL_GITHUB_TOKEN }}

      - name: Docker image push to container registry
        run: docker push $REGISTRY/$IMAGE_NAME:$APP_VERSION